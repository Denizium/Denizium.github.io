//Багатоквартирний будинок

// 1. Створити клас Людина.

// Властивості:
// * імʼя;
// * стать.
// Методи:
// * конструктор, який приймає два параметри: імʼя та стать.

// 2. Створити клас Квартира.

// Властивості:
// * конструктор не потрібен;
// * масив жителів, який при створенні пустий.
// Методи:
// * додати жителя - метод повинен приймати екземпляр класу Людина, та додавати до масиву жителів.

// 3. Створити клас Будинок.

// Властивості:
// * масив квартир, який при створенні пустий;
// * максимальна кількість квартир.
// Методи:
// * конструктор, який приймає один параметр: максимальну кількість квартир;
// * додати квартиру - метод повинен приймати екземпляр класу Квартира, перевіряти, чи не буде кількість перевищувати максимальну 
//кількість квартир, і якщо це так, додати квартиру, в іншому випадку виводить у консоль відповідне повідомлення.


// В якості демонстраціїї створити:

// * декілька екземплярів класу Людина;
// * декілька екземплярів класу Квартира;
// * додадити екземпляри класу Людина до екземплярів класу Квартира;
// * екземпляр класу Будинок;
// * додадити екземпляри класу Квартира до екземплярів класу Будинок.
//========================================================================================================================================

// 1. Створити клас Людина.
// Властивості:
// * імʼя;
// * стать.
// Методи:
// * конструктор, який приймає два параметри: імʼя та стать.

class Person {
  constructor(name, gender) {
    this.name = name;
    this.gender = gender;
  }
  getInfo() {
    console.log(`Person name: ${this.name}, gender: ${this.gender}`);
  }
}
// console.log (getInfo())
const Data = [
  ['John', 'men'],
  ['Alisa', 'woman']
]
const Residents = [];
for (let i = 0; i < Data.length; i++) {
  Residents.push(new Person (...Data[i]));
}
Residents.forEach(Resident => Resident.getInfo());

// 2. Створити клас Квартира.

// Властивості:
// * конструктор не потрібен;
// * масив жителів, який при створенні пустий.
// Методи:
// * додати жителя - метод повинен приймати екземпляр класу Людина, та додавати до масиву жителів.

class Apartment extends Person {
 addPerson()
 {consol.log (Data)}
}


// 3. Створити клас Будинок.

// Властивості:
// * масив квартир, який при створенні пустий;
// * максимальна кількість квартир.
// Методи:
// * конструктор, який приймає один параметр: максимальну кількість квартир;
// * додати квартиру - метод повинен приймати екземпляр класу Квартира, перевіряти, чи не буде кількість перевищувати максимальну 
//кількість квартир, і якщо це так, додати квартиру, в іншому випадку виводить у консоль відповідне повідомлення.




















// class Person {
//     constructor(name, age) {
//         this.name = name;
//         this.age = age;
//     }
//     compareAge(other) {
//         alert(this.age > other.age
//             ? this.name + " старше, чем " + other.name
//             : this.age < other.age
//                 ? this.name + " младше, чем " + other.name
//                 : this.name + " одного возраста с " + other.name
//         );
//     }
// }
// const person1 = new Person('Максим', 24);
// const person2 = new Person('Светлана', 36);
// const person3 = new Person('Ирина', 23);

// person1.compareAge(person2); // Максим младше, чем Светлана
// person2.compareAge(person3); // Светлана старше, чем Ирина
// person3.compareAge(person1); // Ирина младше, чем Максим

//=======================================================================

// 2. Створити клас Квартира.

// Властивості:
// * конструктор не потрібен;
// * масив жителів, який при створенні пустий.
// Методи:
// * додати жителя - метод повинен приймати екземпляр класу Людина, та додавати до масиву жителів.

